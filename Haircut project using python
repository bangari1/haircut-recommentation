import cv2
import mediapipe as mp
import numpy as np
import os

# Initialize Mediapipe Face Mesh
mp_face_mesh = mp.solutions.face_mesh
mp_drawing = mp.solutions.drawing_utils
face_mesh = mp_face_mesh.FaceMesh(static_image_mode=False, max_num_faces=1, refine_landmarks=True)

# Drawing specifications for landmarks
drawing_spec = mp_drawing.DrawingSpec(thickness=1, circle_radius=1)

# Define hairstyles for different face shapes
hairstyles = {
    "Square": [("path_to_image1.jpg", "Buzz Cut"), ("path_to_image2.jpg", "Fade")],
    "Oval": [("path_to_image3.jpg", "Pompadour"), ("path_to_image4.jpg", "Quiff")],
    "Round": [("path_to_image5.jpg", "Fringe"), ("path_to_image6.jpg", "Textured Crop")],
    "Unknown": [("path_to_image7.jpg", "General Style")]
}

# Function to classify face shape
def classify_face_shape(landmarks):
    # Extract key points from the facial landmarks
    jaw_width = np.linalg.norm(np.array(landmarks[130]) - np.array(landmarks[360]))  # Jaw width
    face_height = np.linalg.norm(np.array(landmarks[10]) - np.array(landmarks[152]))  # Face height
    forehead_width = np.linalg.norm(np.array(landmarks[103]) - np.array(landmarks[333]))  # Forehead width

    # Ratios
    jaw_to_height_ratio = jaw_width / face_height
    height_to_forehead_ratio = face_height / forehead_width

    # Determine face shape based on refined measurements
    if 0.8 <= jaw_to_height_ratio <= 1.0 and height_to_forehead_ratio <= 1.4:  # Square face
        return "Square", ["Buzz Cut", "Fade"]
    elif height_to_forehead_ratio > 1.5:  # Oval face
        return "Oval", ["Pompadour", "Quiff"]
    elif jaw_to_height_ratio < 0.75 and height_to_forehead_ratio <= 1.5:  # Round face
        return "Round", ["Fringe", "Textured Crop"]
    else:
        return "Unknown", ["General Style"]

# Overlay text on the video feed
def overlay_text(image, text, position, color=(0, 0, 0)):
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(image, text, position, font, 0.6, color, 2, cv2.LINE_AA)

# Display hairstyle images along with names
def display_hairstyles(image, face_type):
    if face_type in hairstyles:
        screen_width = image.shape[1]
        y_offset = image.shape[0] - 150  # Start position for displaying images at the bottom
        x_offset = 0
        max_images_in_row = 5  # Maximum number of images to display per row

        for idx, (hairstyle_path, hairstyle_name) in enumerate(hairstyles[face_type]):
            if os.path.exists(hairstyle_path):
                haircut_img = cv2.imread(hairstyle_path)
                resized_haircut = cv2.resize(haircut_img, (100, 150))  # Resize for display

                # Position calculation
                x_end = x_offset + resized_haircut.shape[1]
                if x_end > screen_width:  # If we run out of space in the row
                    x_offset = 0
                    y_offset += resized_haircut.shape[0] + 20  # Move to the next row
                    x_end = resized_haircut.shape[1]

                image[y_offset:y_offset + resized_haircut.shape[0], x_offset:x_end] = resized_haircut
                overlay_text(image, hairstyle_name, (x_offset + 5, y_offset - 5), color=(0, 0, 0))

                # Update the x_offset for next image
                x_offset = x_end + 20  # Add padding between images

# Start webcam feed
cap = cv2.VideoCapture(0)

# Set video to fullscreen
cv2.namedWindow("Haircut Suggestion", cv2.WINDOW_NORMAL)
cv2.setWindowProperty("Haircut Suggestion", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    
    # Flip the image for mirror view
    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(rgb_frame)
    
    if results.multi_face_landmarks:
        for face_landmarks in results.multi_face_landmarks:
            landmarks = []
            for lm in face_landmarks.landmark:
                ih, iw, _ = frame.shape
                x, y = int(lm.x * iw), int(lm.y * ih)
                landmarks.append((x, y))
            
            # Classify face shape and get suggestions
            face_type, suggestions = classify_face_shape(landmarks)
            
            # Overlay face shape and suggestions
            overlay_text(frame, f"Face Type: {face_type}", (10, 30), color=(0, 0, 0))
            overlay_text(frame, "Suggestions:", (10, 50), color=(0, 0, 0))
            for i, suggestion in enumerate(suggestions):
                overlay_text(frame, f"- {suggestion}", (10, 70 + i * 20), color=(0, 0, 0))
            
            # Display hairstyle images at the bottom
            display_hairstyles(frame, face_type)
            
            # Draw landmarks and connections
            mp_drawing.draw_landmarks(
                frame, face_landmarks, 
                mp_face_mesh.FACEMESH_TESSELATION,
                landmark_drawing_spec=drawing_spec,
                connection_drawing_spec=drawing_spec
            )
    
    # Show the frame with the suggestions
    cv2.imshow("Haircut Suggestion", frame)
    
    if cv2.waitKey(1) & 0xFF == 27:  # Press 'ESC' to exit
        break

cap.release()
cv2.destroyAllWindows()
